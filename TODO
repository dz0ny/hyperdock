This list is not exactly in order of importance (Several non-important items have been added to the top).
See STATUS for information on what is being worked on at the current moment. When that is cleared, TODO is used.

* Container Migration
  - i want to migrate ny-01 to ny-02 and then rebuild all 01 hosts with the new scripts

* Volume mounting
  - some docker images require may configuration after gaining knowledge of the port #
    - e.g. some influxdb ones were hardcoded, but that was my error. with this one i was able to connect
      also at this point i noticed i can enter host/port https://index.docker.io/u/blalor/influxdb/
  - we can't edit the files on the actual container without having a volume mount
  - we don't want to slipstream an ssh daemon
  - http://pyd.io/ & http://ace.c9.io/
  - Implementation Requirements:
    - Image needs to define director(ies) that should show up in the "root"
    - These directories are mounted in /var/hyperdock/containers/id/(path)
    - A docker container must be created with software that that serves as an endpoint for ace and pyd
    - it must mount /var/hyperdock/

* Need to display container logs, especially if users can edit certain configs

* Need to show creation status

* Log routing:
  - https://github.com/progrium/logspout

* Monitoring:
  - Integrate Sensu
  - Install guide: http://sensuapp.org/docs/0.12/guide
  - Application-level stuff I want to track:
      each time a container was added:
        - which image, which user
      each time a container was removed: 
        - which container, which image, which user
  - Container-level stuff:
    - Which containers are using the most
      - storage
      - memory
      - cpu
    - Which users have the most resource-intensive containers
  - Host-level stuff
    See below
  

* Display metrics and allow upgrades which will assist in scaling
  - containers/show - disk usage & disk upper limit (upgradable -- may require user-scheduleable downtime thru a form with a date picker)
  - hosts/index - disk usage vs max
  - hosts/show - disk, cpu, ram, processes on host

* Public Status Page
  - need to expose a host attribute: online?
  - need stats system to modify this attribute based on health findings
  - need view to use this attribute and not actually do its own health check on render

* Autoscaler
  - we just CAN'T resize disks without downtime
  - we CAN check container size and display it to user
  - we CAN offer price tiers based on storage upper limit
  - we CAN allow upgrading storage upper limit
    - requires user-acknowledged downtime
    - does not impact other users because it happens by means of an export/import onto another virtual server that has the given free space
  - we CAN email users when a container is close to reaching upper limit
  - the above strategies should solve disk-related scaling problems. this should force us to spread the load enough to the point where ram and cpu limits are less likely to be hit by the containers, but we'll have to monitor this in production to determine if we must devise a strategy for those as well.
  - also consider looking at https://coreos.com but this isn't supported on DO, but it is on rackspace: https://coreos.com/docs/running-coreos/cloud-providers/rackspace/
  - we CAN set runtime constraints: http://docs.docker.io/reference/run/#runtime-constraints-on-cpu-and-memory

* https://en.wikipedia.org/wiki/Beowulf_cluster

* Virtual Firewall
  - By default, firewall is disabled
  - Firewall can be enabled which blocks all hosts onto container's exposed ports
  - a textfield allows adding ip addresses, whitelisting them in the firewall

* Polish
  - email signup form
    - Name, Email, What should we have ready by the time you get your invite for you to be happy (certain image(s), feature X) ? Thanks!
  - splash page design by a professional

* Launch
  - post to reddit, hackernews, etc

---

## Post Launch features

* Multi-image templates
  - look at fig.yml http://orchardup.github.io/fig/yml.html

* Container file editing

* Private Images (see below use cases)

* Mobile Strategy
  * Ability to upload a Dockerfile as a private image (let's find out what's best for customers)

  * expose an API to spin up and spin down hyperdock containers

  * An iOS library that implements the Hyperdock API
    - the idea behind this is to allow mobile developers to easily outsource backend complexity for their customers to us
    - e.g. iOS app offers in-app purchase for a hosted service, that uses hyperdock's api, etc.

* Ability to commit a container (thus producing an Image, this is a docker feature) which is then tied to your user so as to become available in your Images list as a private image.
  - In essence this is a "Snapshot" and can be classified and labelled as such.

* Provisioner improvements
  - Don't do everything as root -- see https://index.docker.io/u/strider/strider/ as a good example of how to create new users for the service
